using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using EventCampusAPI.Data;
using EventCampusAPI.Entities;
using EventCampusAPI.Models;
using Microsoft.EntityFrameworkCore;

namespace EventCampusAPI.Controller
{
    [ApiController]
    [Route("api/[controller]")]
    public class CategoryController : ControllerBase
    {
        private readonly AppDbContext _context;

        public CategoryController(AppDbContext context)
        {
            _context = context;
        }

        [HttpGet("GetAll")]
        [Authorize]
        public async Task<IActionResult> GetCategories()
        {
            try
            {
                var categories = await _context.Categories.ToListAsync();
                var categoryResponse = categories.Select(c => new CategoryResponseModel
                {
                    Id = c.Id,
                    Name = c.Name,
                    Icon = c.Icon,
                    Description = c.Description
                }).ToList();

                return Ok(new { 
                    success = true, 
                    message = "Kategoriler ba≈üarƒ±yla getirildi", 
                    data = categoryResponse 
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = "Bir hata olu≈ütu: " + ex.Message });
            }
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetCategory(int id)
        {
            try
            {
                var category = await _context.Categories.FindAsync(id);
                if (category == null)
                {
                    return NotFound(new { success = false, message = "Kategori bulunamadƒ±" });
                }

                var categoryResponse = new CategoryResponseModel
                {
                    Id = category.Id,
                    Name = category.Name,
                    Icon = category.Icon,
                    Description = category.Description
                };

                return Ok(new { 
                    success = true, 
                    message = "Kategori ba≈üarƒ±yla getirildi", 
                    data = categoryResponse 
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = "Bir hata olu≈ütu: " + ex.Message });
            }
        }

        [HttpPost]
        [Authorize] // Sadece giri≈ü yapan kullanƒ±cƒ±lar kategori ekleyebilir
        public async Task<IActionResult> CreateCategory([FromBody] CreateCategoryRequestModel model)
        {
            try
            {
                var category = new Category
                {
                    Name = model.Name,
                    Icon = model.Icon,
                    Description = model.Description
                };

                _context.Categories.Add(category);
                await _context.SaveChangesAsync();

                var categoryResponse = new CategoryResponseModel
                {
                    Id = category.Id,
                    Name = category.Name,
                    Icon = category.Icon,
                    Description = category.Description
                };

                return Ok(new { 
                    success = true, 
                    message = "Kategori ba≈üarƒ±yla olu≈üturuldu", 
                    data = categoryResponse 
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = "Bir hata olu≈ütu: " + ex.Message });
            }
        }

        [HttpPut("{id}")]
        [Authorize] // Sadece giri≈ü yapan kullanƒ±cƒ±lar kategori d√ºzenleyebilir
        public async Task<IActionResult> UpdateCategory(int id, [FromBody] UpdateCategoryRequestModel model)
        {
            try
            {
                var category = await _context.Categories.FindAsync(id);
                if (category == null)
                {
                    return NotFound(new { success = false, message = "Kategori bulunamadƒ±" });
                }

                category.Name = model.Name;
                category.Icon = model.Icon;
                category.Description = model.Description;

                await _context.SaveChangesAsync();

                var categoryResponse = new CategoryResponseModel
                {
                    Id = category.Id,
                    Name = category.Name,
                    Icon = category.Icon,
                    Description = category.Description
                };

                return Ok(new { 
                    success = true, 
                    message = "Kategori ba≈üarƒ±yla g√ºncellendi", 
                    data = categoryResponse 
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = "Bir hata olu≈ütu: " + ex.Message });
            }
        }

        [HttpDelete("{id}")]
        [Authorize] // Sadece giri≈ü yapan kullanƒ±cƒ±lar kategori silebilir
        public async Task<IActionResult> DeleteCategory(int id)
        {
            try
            {
                var category = await _context.Categories
                    .Include(c => c.Events)
                    .FirstOrDefaultAsync(c => c.Id == id);

                if (category == null)
                {
                    return NotFound(new { success = false, message = "Kategori bulunamadƒ±" });
                }

                // Kategoriye ait etkinlik varsa silme
                if (category.Events.Any())
                {
                    return BadRequest(new { 
                        success = false, 
                        message = "Bu kategoriye ait etkinlikler bulunduƒüu i√ßin kategori silinemez" 
                    });
                }

                _context.Categories.Remove(category);
                await _context.SaveChangesAsync();

                return Ok(new { 
                    success = true, 
                    message = "Kategori ba≈üarƒ±yla silindi" 
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = "Bir hata olu≈ütu: " + ex.Message });
            }
        }

        [HttpPost("seed")]
        public async Task<IActionResult> SeedCategories()
        {
            try
            {
                // Zaten kategori varsa seed etme
                if (await _context.Categories.AnyAsync())
                {
                    return BadRequest(new { 
                        success = false, 
                        message = "Kategoriler zaten mevcut" 
                    });
                }

                var categories = new List<Category>
                {
                    new Category { Name = "Akademik", Icon = "üéì", Description = "Akademik etkinlikler, seminerler, konferanslar" },
                    new Category { Name = "Sosyal", Icon = "üéâ", Description = "Sosyal etkinlikler, partiler, bulu≈ümalar" },
                    new Category { Name = "Spor", Icon = "‚öΩ", Description = "Spor etkinlikleri, m√ºsabakalar, turnuvalar" },
                    new Category { Name = "K√ºlt√ºr", Icon = "üé≠", Description = "K√ºlt√ºrel etkinlikler, sanat, m√ºzik" },
                    new Category { Name = "Teknoloji", Icon = "üíª", Description = "Teknoloji etkinlikleri, workshop'lar, hackathon'lar" },
                    new Category { Name = "Kariyer", Icon = "üíº", Description = "Kariyer etkinlikleri, i≈ü fuarlarƒ±, networking" },
                    new Category { Name = "Eƒülence", Icon = "üé™", Description = "Eƒülence etkinlikleri, oyunlar, aktiviteler" },
                    new Category { Name = "Saƒülƒ±k", Icon = "üè•", Description = "Saƒülƒ±k ve wellness etkinlikleri" },
                    new Category { Name = "G√∂n√ºll√ºl√ºk", Icon = "ü§ù", Description = "G√∂n√ºll√ºl√ºk projeleri ve sosyal sorumluluk" },
                    new Category { Name = "Diƒüer", Icon = "üìù", Description = "Diƒüer etkinlikler" }
                };

                _context.Categories.AddRange(categories);
                await _context.SaveChangesAsync();

                return Ok(new { 
                    success = true, 
                    message = $"{categories.Count} kategori ba≈üarƒ±yla eklendi" 
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = "Bir hata olu≈ütu: " + ex.Message });
            }
        }
    }
} 